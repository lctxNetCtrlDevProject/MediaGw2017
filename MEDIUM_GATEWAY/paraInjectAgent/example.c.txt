/*
*@Desc: 	This file is a demo code which used to descript how to using paraInjectAgent.c to handle one-key-network-para-injecting by 30 suo
*@Autor: 	Andy-wei.hou
*@Log:  	2017.02.20 created by Andy-wei.hou
*/

/****************Macro & Defination**********************/

typedef int (*tag_cb)(unsigned char *buf, int len);
typedef struct _tag {	/*struct that using to mapping tag string in paraInjectFile to related paraProc callback funcs*/
	char name[8];		/*tag in paraInjectFile which gets from 30suo. Generally, the tag is a string with size 6 bytes*/
	tag_cb callback;	/*Related proc callback func*/
//	char *p;
} tag;

/*para_i proc call back funcs*/
extern int para_1_cb(unsigned char *buf, int len);
extern int para_2_cb(unsigned char *buf, int len);
extern int para_3_cb(unsigned char *buf, int len);
extern int para_4_cb(unsigned char *buf, int len);
/*
extern int para_x_cb(unsigned char *buf, int len);
*/


/**********Global Variablies*****************/
/*all para tag in paraInject file with its related callback funcs*/
tag tagList[] = {
	{"para_1", para_1_cb},
	{"para_2", para_2_cb},
	{"para_3", para_3_cb},
	{"para_4", para_4_cb},
	{"", NULL},
};



/*****************************Funcs******************/
/****----------------Stake funs------------------------------***/

/*proc para Inject bytes order without inject file header*/
int  paraFileProcFun(unsigned char *buf, int len){

	int i, j;
	int ret = 0;

	//how to deal with buffer size > len
	DBG(" process para inject files");
	printf("-------------start------------");
	for (i = 0; i < len; i++)
	{
		if (i%20 == 0)
			printf("\n");
		printf("0x%x ", buf[i]);
	}
	printf("\n");

	/*retrieval all tags in paraInject file and invoke it's callback funs to proc it*/
	for (i = 0; strlen(tagList[i].name); i++)
	{
		for (j = 0; j < len; j++) {
			ret = memcmp(&buf[j], &tagList[i], 6);	/*generally , tag in paraInject file is 6 bytes*/
			if (ret == 0) { //find tag
				ret = tagList[i].callback(&buf[j]+6, 0);
				if (ret) {
					printf("tag:%s callback error\n", tagList[i].name);
					return -1;
				}

				break;
			} 

		}
		
		if (j == len) {
			printf("can't find tagname %s\n", tagList[i].name);
			return -1;
		}
	}


	return ret;


}

/*proc clear device parameter*/
int paraClrFun(){
	DBGX("clr dev paras");

	
	return 0;
}


/*You should invoke ParaInject() funs in your Main fun and include "example.h" in your main file*/
void ParaInject(){	
	DEV_ID_TYPE devID;
	devID.dev_type = 0xF5;		/*device type*/
	devID.manu_id = 0x0834;		/*manufactory id*/
	devID.dev_seq = 0x0001;		/*dev seq id*/
	
	
	if(initParaInjectAgent(&devID,paraFileProcFun,paraClrFun) < 0 ){
		exit(0);
	}

}
